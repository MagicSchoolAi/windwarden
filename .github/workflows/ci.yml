name: CI

on:
  push:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Fast feedback - basic checks
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-lint-
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run clippy (pedantic)
        run: cargo clippy --all-targets --all-features -- -W clippy::pedantic
        continue-on-error: true # Don't fail CI on pedantic warnings

      - name: Check for security vulnerabilities
        run: |
          cargo install cargo-audit || true
          cargo audit || true

  # Comprehensive testing across platforms
  test:
    name: Test (${{ matrix.os }}, Rust ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --all-features

      - name: Run unit tests
        run: cargo test --lib --all-features

      - name: Run integration tests
        run: cargo test --test '*' --all-features

      - name: Run doc tests
        run: cargo test --doc --all-features

      - name: Test CLI functionality
        shell: bash
        run: |
          # Build release binary for testing
          cargo build --release

          # Test basic functionality
          ./target/release/windwarden${{ matrix.os == 'windows-latest' && '.exe' || '' }} --version
          ./target/release/windwarden${{ matrix.os == 'windows-latest' && '.exe' || '' }} --help

          # Test configuration commands
          ./target/release/windwarden${{ matrix.os == 'windows-latest' && '.exe' || '' }} config init --path test-config.json
          ./target/release/windwarden${{ matrix.os == 'windows-latest' && '.exe' || '' }} config validate test-config.json
          ./target/release/windwarden${{ matrix.os == 'windows-latest' && '.exe' || '' }} config show > /dev/null

          # Test completions generation
          ./target/release/windwarden${{ matrix.os == 'windows-latest' && '.exe' || '' }} completions bash > /dev/null
          ./target/release/windwarden${{ matrix.os == 'windows-latest' && '.exe' || '' }} completions zsh > /dev/null
          ./target/release/windwarden${{ matrix.os == 'windows-latest' && '.exe' || '' }} completions fish > /dev/null

          # Test processing with test files
          echo '<div className="p-4 flex m-2">' > test.tsx
          ./target/release/windwarden${{ matrix.os == 'windows-latest' && '.exe' || '' }} format --mode check test.tsx

  # Performance testing
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

      - name: Run benchmarks
        run: |
          if [ -d "benches" ]; then
            cargo bench --no-run
            echo "Benchmark binaries built successfully"
          else
            echo "No benchmark directory found, skipping"
          fi

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Generate coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: lcov.info
          fail_ci_if_error: false

  # Check that examples and documentation work
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}

      - name: Build documentation
        run: cargo doc --all-features --no-deps

      - name: Check for broken links in docs
        run: |
          cargo install cargo-deadlinks || true
          cargo deadlinks --check-http || true

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run security audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
