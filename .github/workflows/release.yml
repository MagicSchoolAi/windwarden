name: Release

on:
  push:
    branches: [main]
    tags: ["v*"]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build binaries for multiple platforms
  build:
    name: Build (${{ matrix.asset_name }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: windwarden
            asset_name: windwarden-linux-x86_64
          # - os: ubuntu-24.04-arm
          #   target: aarch64-unknown-linux-gnu
          #   artifact_name: windwarden
          #   asset_name: windwarden-linux-aarch64

          # macOS
          - os: macos-13
            target: x86_64-apple-darwin
            artifact_name: windwarden
            asset_name: windwarden-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: windwarden
            asset_name: windwarden-macos-aarch64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ runner.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        run: cargo build --release

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: strip target/release/${{ matrix.artifact_name }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/release/${{ matrix.artifact_name }}
          retention-days: 1

  # Determine if this should be a release
  check-release:
    name: Check Release Conditions
    runs-on: ubuntu-latest
    needs: [build]
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      version: ${{ steps.check.outputs.version }}
      is-prerelease: ${{ steps.check.outputs.is-prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check release conditions
        id: check
        run: |
          # Check if this is a tag push
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "Tag push detected: $GITHUB_REF"
            echo "should-release=true" >> $GITHUB_OUTPUT
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            # Check if this is a prerelease (contains alpha, beta, rc, etc.)
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              echo "is-prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "is-prerelease=false" >> $GITHUB_OUTPUT
            fi
          # Check if this is a push to main with version bump
          elif [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            # Get the version from Cargo.toml
            VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
            echo "Current version: $VERSION"

            # Check if this version has already been tagged
            if git tag -l | grep -q "^v$VERSION$"; then
              echo "Version v$VERSION already tagged, skipping release"
              echo "should-release=false" >> $GITHUB_OUTPUT
            else
              echo "New version detected: $VERSION"
              echo "should-release=true" >> $GITHUB_OUTPUT
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "is-prerelease=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Not a release condition"
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, check-release]
    if: needs.check-release.outputs.should-release == 'true'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifact structure
        run: |
          echo "=== Artifacts directory structure ==="
          find artifacts -type f -ls
          echo "=== Contents ==="
          ls -la artifacts/*/

      - name: Create Git Tag (if from main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ needs.check-release.outputs.version }}" -m "Release v${{ needs.check-release.outputs.version }}"
          git push origin "v${{ needs.check-release.outputs.version }}"

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="v${{ needs.check-release.outputs.version }}"
          echo "Generating release notes for $VERSION"

          # Get previous tag for changelog
          PREV_TAG=$(git tag -l --sort=-version:refname | grep -v "$VERSION" | head -1)
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi

          echo "Previous tag: $PREV_TAG"

          # Generate changelog
          cat > release-notes.md << EOF
          ## What's New in $VERSION

          ### 🚀 Features & Improvements
          $(git log $PREV_TAG..HEAD --pretty=format:"- %s" --grep="feat\|add\|implement" | head -10)

          ### 🐛 Bug Fixes
          $(git log $PREV_TAG..HEAD --pretty=format:"- %s" --grep="fix\|bug" | head -10)

          ### 📚 Documentation
          $(git log $PREV_TAG..HEAD --pretty=format:"- %s" --grep="doc\|readme" | head -5)

          ### 🔧 Technical Changes
          $(git log $PREV_TAG..HEAD --pretty=format:"- %s" --grep="refactor\|perf\|test" | head -5)

          ## Installation

          ### Quick Install Scripts

          **Linux/macOS (x86_64):**
          \`\`\`bash
          curl -L https://github.com/\${{ github.repository }}/releases/download/$VERSION/windwarden-linux-x86_64 -o windwarden
          chmod +x windwarden
          sudo mv windwarden /usr/local/bin/
          \`\`\`

          **macOS (Apple Silicon):**
          \`\`\`bash
          curl -L https://github.com/\${{ github.repository }}/releases/download/$VERSION/windwarden-macos-aarch64 -o windwarden
          chmod +x windwarden
          sudo mv windwarden /usr/local/bin/
          \`\`\`

          ### Package Managers

          We're working on Homebrew and npm distribution. For now, please use the direct download links above.

          ### Shell Completions

          After installation, set up shell completions:
          \`\`\`bash
          # Bash
          windwarden completions bash | sudo tee /etc/bash_completion.d/windwarden

          # Zsh
          windwarden completions zsh > ~/.zsh/completions/_windwarden

          # Fish
          windwarden completions fish > ~/.config/fish/completions/windwarden.fish
          \`\`\`

          ## Full Changelog

          **All changes since $PREV_TAG:**
          $(git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" | head -20)

          ---

          For more details, see the [full documentation](https://github.com/\${{ github.repository }}).
          EOF

          echo "release-notes-file=release-notes.md" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-release.outputs.version }}
          name: WindWarden v${{ needs.check-release.outputs.version }}
          body_path: release-notes.md
          prerelease: ${{ needs.check-release.outputs.is-prerelease == 'true' }}
          files: |
            artifacts/windwarden-linux-x86_64/windwarden
            artifacts/windwarden-macos-x86_64/windwarden
            artifacts/windwarden-macos-aarch64/windwarden
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
